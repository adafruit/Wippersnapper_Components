{
  "title": "UART Component Definition",
  "description": "A UART WipperSnapper component for use in Adafruit IO",
  "type": "object",
  "$defs": {
    "subcomponent": {
      "type": [
        "string",
        "object"
      ],
      "pattern": "^(unspecified|accelerometer|magnetic-field|orientation|gyroscope|light|pressure|proximity|gravity|acceleration|rotation|humidity|ambient-temp|object-temp|voltage|current|color|raw|pm10-std|pm25-std|pm100-std|pm10-env|pm25-env|pm100-env|co2|gas-resistance|altitude|lux|eco2|unitless-percent|ambient-temp-fahrenheit|object-temp-fahrenheit|voc-index|nox-index|tvoc)$",
      "required": [
        "displayName",
        "sensorType"
      ],
      "additionalProperties": false,
      "properties": {
        "displayName": {
          "description": "The human-friendly name of this sensor.",
          "type": "string",
          "minLength": 3,
          "maxLength": 24
        },
        "type": {
          "description": "A unique string used to look up this sensor's definition, and its parent component's definition.",
          "type": "string",
          "minLength": 3,
          "maxLength": 24
        },
        "sensorType": {
          "description": "One of the supported sensor-type strings (found in README).",
          "type": "string",
          "pattern": "^(unspecified|accelerometer|magnetic-field|orientation|gyroscope|light|pressure|proximity|gravity|acceleration|rotation|humidity|ambient-temp|object-temp|voltage|current|color|raw|pm10-std|pm25-std|pm100-std|pm10-env|pm25-env|pm100-env|co2|gas-resistance|altitude|lux|eco2|unitless-percent|ambient-temp-fahrenheit|object-temp-fahrenheit|voc-index|nox-index|tvoc)$"
        }
      }
    }
  },
  "required": [
    "displayName",
    "vendor",
    "deviceId",
    "baudRate",
    "deviceType"
  ],
  "additionalProperties": false,
  "properties": {
    "displayName": {
      "description": "The human-friendly name of this component.",
      "type": "string",
      "minLength": 3,
      "maxLength": 30
    },
    "published": {
      "description": "If True, this component is supported by the current firmware version and will be displayed to all users. Otherwise, it is hidden behind a developer toggle so that contributors can still work on it against the production site.",
      "type": "boolean"
    },
    "description": {
      "description": "A brief description describing this component's capabilities.",
      "type": "string",
      "minLength": 3,
      "maxLength": 255
    },
    "productURL": {
      "description": "Link to this component's homepage.",
      "type": "string",
      "format": "uri"
    },
    "documentationURL": {
      "description": "Link to this component's documentation.",
      "type": "string",
      "format": "uri"
    },
    "vendor": {
      "description": "Name of the company that makes this component.",
      "type": "string",
      "minLength": 3,
      "maxLength": 24
    },
    "pinTx": {
      "description": "The desired UART TX pin",
      "type": "string",
      "minLength": 1,
      "maxLength": 16
    },
    "pinRx": {
      "description": "The desired UART RX pin",
      "type": "string",
      "minLength": 1,
      "maxLength": 16
    },
    "portNumber": {
      "description": "The desired UART bus port number",
      "type": "number",
      "minimum": 0,
      "maximum": 3
    },
    "baudRate": {
      "description": "The desired UART bus baud rate, in bps.",
      "type": "number",
      "minimum": 1200,
      "maximum": 256000
    },
    "format": {
      "description": "The data, parity, and stop bits configuration for the serial port. Defaults to 8N1 (8 data bits, no parity, 1 stop bit).",
      "type": "string",
      "enum": [
        "unspecified",
        "8n1",
        "5n1",
        "6n1",
        "7n1",
        "5n2",
        "6n2",
        "7n2",
        "8n2",
        "5e1",
        "6e1",
        "7e1",
        "8e1",
        "5e2",
        "6e2",
        "7e2",
        "8e2",
        "5o1",
        "6o1",
        "7o1",
        "8o1",
        "5o2",
        "6o2",
        "7o2",
        "8o2"
      ],
      "default": "8n1"
    },
    "timeout": {
      "description": "Maximum milliseconds to wait for serial data. Defaults to 1000 ms.",
      "type": "number",
      "minimum": 0,
      "maximum": 65535
    },
    "use_sw_serial": {
      "description": "If True, uses software serial instead of hardware serial. Defaults to False.",
      "type": "boolean"
    },
    "invert_sw_serial": {
      "description": "If True, inverts the UART signal on RX and TX pins. Defaults to False.",
      "type": "boolean"
    },
    "deviceId": {
      "description": "The unique identifier string for the UART device.",
      "type": "string",
      "minLength": 3,
      "maxLength": 30
    },
    "deviceType": {
      "description": "The data, parity, and stop bits configuration for the serial port. Defaults to 8N1 (8 data bits, no parity, 1 stop bit).",
      "type": "string",
      "enum": [
        "unspecified",
        "generic_input",
        "generic_output",
        "gps",
        "pm25aqi",
        "tm22xx"
      ],
      "default": "unspecified"
    },
    "pm25aqi": {
      "type": "object",
      "description": "Configuration for PM2.5 AQI sensors",
      "required": [
        "period",
        "sensor_types"
      ],
      "properties": {
        "is_pm1006": {
          "type": "boolean",
          "description": "True if the device is a PM1006 AQ sensor",
          "default": false
        },
        "period": {
          "type": "integer",
          "description": "The period to poll the device, in milliseconds",
          "minimum": 0,
          "maximum": 65535
        },
        "sensor_types": {
          "type": "array",
          "description": "SI Types for each sensor on the I2c device",
          "items": {
            "$ref": "#/$defs/subcomponent"
          }
        }
      },
      "additionalProperties": false
    },
    "generic_input": {
      "type": "object",
      "description": "Configuration for generic UART input devices.",
      "required": [
        "period",
        "sensor_types"
      ],
      "properties": {
        "line_ending": {
          "description": "The line ending format for incoming data.",
          "type": "string",
          "enum": [
            "unspecified",
            "lf",
            "crlf",
            "timeout_100ms",
            "timeout_1000ms"
          ],
          "default": "unspecified"
        },
        "period": {
          "type": "integer",
          "description": "The period to poll the device, in milliseconds",
          "minimum": 0,
          "maximum": 65535
        },
        "sensor_types": {
          "type": "array",
          "description": "SI Types for each sensor on the I2c device",
          "items": {
            "$ref": "#/$defs/subcomponent"
          }
        }
      },
      "additionalProperties": false
    },
    "gps": {
      "type": "object",
      "description": "Configuration for GPS devices.",
      "required": [
        "period"
      ],
      "properties": {
        "commands_pmtks": {
          "type": "array",
          "description": "List of PMTK commands (MediaTek) in string format",
          "items": {
            "type": "string"
          }
        },
        "commands_ubxes": {
          "type": "array",
          "description": "List of UBX commands (U-Blox) in bytes format",
          "items": {
            "type": "string",
            "contentEncoding": "base64"
          }
        },
        "period": {
          "type": "integer",
          "description": "Desired period to poll the GPS module, in milliseconds",
          "minimum": 0,
          "maximum": 65535
        }
      },
      "additionalProperties": false
    }
  }
}